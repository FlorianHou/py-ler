Ex1：
	Print
	如何按照自己的意愿打印
Ex2:
	#
Ex3:
	Coding:utf-8
	+,-,*,/,<,=
	运算法则
Ex4
	给变量进行赋值
Ex5
	变量的赋值种类
	‘与"
	格式化字符串
Ex6
	%s与%r的应用
	
Ex7
	打印中添加 *的意义，格式化字符串如何将调用的字符串直接安放在语句后面%（。。。）
Ex8
	练习格式化字符
Ex9
	'''与"""的实际应用意义，可以按照你程序中输入的样子进行打印, \n是什么意思呢？
Ex10
	For__in [….]是什么意思，__中可以填写合法的字符，并依次将[ ]中的字符（也可以是数字）赋予__中的字符
	While True 在应用中可以表达无限循环
	\t 代表横向制表符
Ex11
	开始学习raw_input()可以开始从外界输入数据啦！！raw_input()会把你输入的任何东西当做字符来对待，input()会运行你输入的东西，他期望你输入一个合法的表达式例如如果你输入1+3  使用input()时会返回4
	还进行了%s的练习
Ex12
	将格式化字符与raw_input()组合在了一起进行使用
Ex13
	 学习了argv，学会了如何调用argv， 
	From sys import argv 
	在cmd输入命令时记得后面带上程序里需要的变量！
Ex14
	在raw_input()的()中输入你想打印在屏幕上的话，可以在程序运行时显示出来
Ex15
	开始使用#来解释我写的程序，但是如果解释中包含中文记得在开头加上
	#-*-coding:utf-8-*-让python以utf-8的编码方式进行读取（py2中默认使用ANSI，py3就没有这个问题了）
Ex16
	从电脑中读取文件?=open( __ ,w)___表示的是文件地址， ,w表示的是以只读方式打开，?可以替换为任意合法名称，表示将文件打开后寄存到?中。
	?.truncate表示删除?中寄存的文件
	?.write()表示将()中的内容写入到文件中同时文件原数据会被清空，但是我觉得如果加入读取的光标是不是就不会被擦除了。.
	?.close()关闭并保存文件
Ex17
	学习exists( )，len( )，
	exists( )的括号中填写文件名，以此来判断括号中的文件在本目录中是否存在，返回的值为FALSE或者TRUE，
	Len( ) 中填写将文件打开后赋予给的那个变量的名字，并获取该文件有多少bytes。同时在这个程序中我发现即使文件夹中没有该文件但是当执行write的时候该文件将被创建。
Ex18
	学习利用def来定义一个新的函数，模式为 def name （函数中的变量名称）:括号中可以为空
	记得最后的冒号，
	调用的时只需要 输入name（变量）就可以正常使用。
	def print_two(*args):
	    arg1,arg2=args
	    print "arg1:%r,arg2:%r"%(arg1,arg2)
	注意！*args之前没有遇到过
Ex19
	深入继续练习def这次发现在( )也可以进行运算例如：
	cheese_and_crackers(amount_of_cheese+100,amount_of_crackers+1000)
Ex20
	这次出现了一个函数seek( )，因为在python中如果执行了一次a.read( )，当再执行print a时，紧接着再print一遍a时会发现打印内容为空，这是因为此时python在文件a中的读取光标在最后，所以需要seek(0)让读取光标回到开头，seek(0)中的0代表0bytes所以seek是按照bytes来移动光标的。
	这个程序中还有一个readline()功能，默认每读取一行就停止（也就是说遇到一个\n)，继续向下执行程序。
Ex21
	注意%d的意思
	使用def时可以在最后设置一个return __ ,来返回一个值，但是我不确定如何来确定返回的值是数字，还是字符。。。同时在return 的后面也可以加一个数学表达式
	def divide(a,b):
		print"DIVIDING %d / %d"%(a,b)
		return a / b
	再有一个很有趣的用法，函数的括号里再套一个函数，其实这样就可以很好地理解，当一个函数有return时，这个函数就成了一个变量，不知道说的对不对，用下面的这一段程序来理解理解吧。。
	#what=add(age,subtract(height,multiply(weight,divide(iq,2))))
	
	

	
	
	


	
	
